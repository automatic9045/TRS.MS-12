<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism</name>
    </assembly>
    <members>
        <member name="T:Prism.Commands.CompositeCommand">
            <summary>
            The CompositeCommand composes one or more ICommands.
            </summary>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Commands.CompositeCommand"/>.
            </summary>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Commands.CompositeCommand"/>.
            </summary>
            <param name="monitorCommandActivity">Indicates when the command activity is going to be monitored.</param>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.RegisterCommand(System.Windows.Input.ICommand)">
            <summary>
            Adds a command to the collection and signs up for the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event of it.
            </summary>
             <remarks>
            If this command is set to monitor command activity, and <paramref name="command"/> 
            implements the <see cref="T:Prism.IActiveAware"/> interface, this method will subscribe to its
            <see cref="E:Prism.IActiveAware.IsActiveChanged"/> event.
            </remarks>
            <param name="command">The command to register.</param>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.UnregisterCommand(System.Windows.Input.ICommand)">
            <summary>
            Removes a command from the collection and removes itself from the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event of it.
            </summary>
            <param name="command">The command to unregister.</param>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.CanExecute(System.Object)">
            <summary>
            Forwards <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to the registered commands and returns
            <see langword="true" /> if all of the commands return <see langword="true" />.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to <see langword="null" />.
            </param>
            <returns><see langword="true" /> if all of the commands return <see langword="true" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="E:Prism.Commands.CompositeCommand.CanExecuteChanged">
            <summary>
            Occurs when any of the registered commands raise <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>.
            </summary>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.Execute(System.Object)">
            <summary>
            Forwards <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> to the registered commands.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to <see langword="null" />.
            </param>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.ShouldExecute(System.Windows.Input.ICommand)">
            <summary>
            Evaluates if a command should execute.
            </summary>
            <param name="command">The command to evaluate.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether the command should be used 
            when evaluating <see cref="M:Prism.Commands.CompositeCommand.CanExecute(System.Object)"/> and <see cref="M:Prism.Commands.CompositeCommand.Execute(System.Object)"/>.</returns>
            <remarks>
            If this command is set to monitor command activity, and <paramref name="command"/>
            implements the <see cref="T:Prism.IActiveAware"/> interface, 
            this method will return <see langword="false" /> if the command's <see cref="P:Prism.IActiveAware.IsActive"/> 
            property is <see langword="false" />; otherwise it always returns <see langword="true" />.</remarks>
        </member>
        <member name="P:Prism.Commands.CompositeCommand.RegisteredCommands">
            <summary>
            Gets the list of all the registered commands.
            </summary>
            <value>A list of registered commands.</value>
            <remarks>This returns a copy of the commands subscribed to the CompositeCommand.</remarks>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> on the UI thread so every 
            command invoker can requery <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to check if the
            <see cref="T:Prism.Commands.CompositeCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.Command_IsActiveChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for IsActiveChanged events of registered commands.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">EventArgs to pass to the event.</param>
        </member>
        <member name="T:Prism.Commands.DelegateCommand">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates do not take any parameters for <see cref="M:Prism.Commands.DelegateCommand.Execute"/> and <see cref="M:Prism.Commands.DelegateCommand.CanExecute"/>.
            </summary>
            <see cref="T:Prism.Commands.DelegateCommandBase"/>
            <see cref="T:Prism.Commands.DelegateCommand`1"/>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.#ctor(System.Action)">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution
            and a <see langword="Func" /> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
            <param name="canExecuteMethod">The <see cref="T:System.Func`1"/> to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is called</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Execute">
            <summary>
             Executes the command.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.CanExecute">
            <summary>
            Determines if the command can be executed.
            </summary>
            <returns>Returns <see langword="true"/> if the command can execute,otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <param name="canExecuteExpression">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="T:Prism.Commands.DelegateCommandBase">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Prism.Commands.DelegateCommandBase.Execute(System.Object)"/> and <see cref="M:Prism.Commands.DelegateCommandBase.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Prism.Commands.DelegateCommandBase"/>, specifying both the execute action and the can execute function.
            </summary>
        </member>
        <member name="E:Prism.Commands.DelegateCommandBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> so every 
            command invoker can requery <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.RaiseCanExecuteChanged">
            <summary>
            Raises <see cref="E:Prism.Commands.DelegateCommandBase.CanExecuteChanged"/> so every command invoker
            can requery to check if the command can execute.
            </summary>
            <remarks>Note that this will trigger the execution of <see cref="E:Prism.Commands.DelegateCommandBase.CanExecuteChanged"/> once for each invoker.</remarks>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.ObservesPropertyInternal``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
        </member>
        <member name="P:Prism.Commands.DelegateCommandBase.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Prism.Commands.DelegateCommandBase.IsActiveChanged">
            <summary>
            Fired if the <see cref="P:Prism.Commands.DelegateCommandBase.IsActive"/> property changes.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.OnIsActiveChanged">
            <summary>
            This raises the <see cref="E:Prism.Commands.DelegateCommandBase.IsActiveChanged"/> event.
            </summary>
        </member>
        <member name="T:Prism.Commands.DelegateCommand`1">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Prism.Commands.DelegateCommand`1.Execute(`0)"/> and <see cref="M:Prism.Commands.DelegateCommand`1.CanExecute(`0)"/>.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <remarks>
            The constructor deliberately prevents the use of value types.
            Because ICommand takes an object, having a value type for T would cause unexpected behavior when CanExecute(null) is called during XAML initialization for command bindings.
            Using default(T) was considered and rejected as a solution because the implementor would not be able to distinguish between a valid and defaulted values.
            <para/>
            Instead, callers should support a value type by using a nullable value type and checking the HasValue property before using the Value property.
            <example>
                <code>
            public MyClass()
            {
                this.submitCommand = new DelegateCommand&lt;int?&gt;(this.Submit, this.CanSubmit);
            }
            
            private bool CanSubmit(int? customerId)
            {
                return (customerId.HasValue &amp;&amp; customers.Contains(customerId.Value));
            }
                </code>
            </example>
            </remarks>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command. This can be null to just hook up a CanExecute delegate.</param>
            <remarks><see cref="M:Prism.Commands.DelegateCommand`1.CanExecute(`0)"/> will always return true.</remarks>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command. This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command. This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> are <see langword="null" />.</exception>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Execute(`0)">
            <summary>
            Executes the command and invokes the <see cref="T:System.Action`1"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Determines if the command can execute by invoked the <see cref="T:System.Func`2"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command to determine if it can execute.</param>
            <returns>
            <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="TType">The type of the return value of the method that this delegate encapulates</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <param name="canExecuteExpression">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="T:Prism.Commands.PropertyObserver">
            <summary>
            Provide a way to observe property changes of INotifyPropertyChanged objects and invokes a 
            custom action when the PropertyChanged event is fired.
            </summary>
        </member>
        <member name="M:Prism.Commands.PropertyObserver.Observes``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action)">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls a custom action on 
            property changed notifications. The given expression must be in this form: "() => Prop.NestedProp.PropToObserve".
            </summary>
            <param name="propertyExpression">Expression representing property to be observed. Ex.: "() => Prop.NestedProp.PropToObserve".</param>
            <param name="action">Action to be invoked when PropertyChanged event occours.</param>
        </member>
        <member name="T:Prism.Commands.PropertyObserverNode">
            <summary>
            Represents each node of nested properties expression and takes care of 
            subscribing/unsubscribing INotifyPropertyChanged.PropertyChanged listeners on it.
            </summary>
        </member>
        <member name="T:Prism.Common.IParameters">
            <summary>
            Defines a contract for specifying values associated with a unique key.
            </summary>
        </member>
        <member name="M:Prism.Common.IParameters.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the parameter collection.
            </summary>
            <param name="key">The key of the parameter to add.</param>
            <param name="value">The value of the parameter to add.</param>
        </member>
        <member name="M:Prism.Common.IParameters.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Prism.Common.IParameters"/> contains the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to search the parameters for existence.</param>
            <returns>true if the <see cref="T:Prism.Common.IParameters"/> contains a parameter with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Prism.Common.IParameters.Count">
            <summary>
            Gets the number of parameters contained in the <see cref="T:Prism.Common.IParameters"/>.
            </summary>
        </member>
        <member name="P:Prism.Common.IParameters.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Prism.Common.IParameters"/>.
            </summary>
        </member>
        <member name="M:Prism.Common.IParameters.GetValue``1(System.String)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to find.</param>
            <returns>A matching value of <typeparamref name="T"/> if it exists.</returns>
        </member>
        <member name="M:Prism.Common.IParameters.GetValues``1(System.String)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to find.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the values referenced by key.</returns>
        </member>
        <member name="M:Prism.Common.IParameters.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to get.</param>
            <param name="value">
            When this method returns, contains the parameter associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            </param>
            <returns>true if the <see cref="T:Prism.Common.IParameters"/> contains a parameter with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Prism.Common.IParameters.Item(System.String)">
            <summary>
            Gets the parameter associated with the specified key (legacy).
            </summary>
            <param name="key">The key of the parameter to get.</param>
            <returns>A matching value if it exists.</returns>
        </member>
        <member name="T:Prism.Common.ListDictionary`2">
            <summary>
            A dictionary of lists.
            </summary>
            <typeparam name="TKey">The key to use for lists.</typeparam>
            <typeparam name="TValue">The type of the value held by lists.</typeparam>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.Add(`0)">
            <summary>
            If a list does not already exist, it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to a list with the given key. If a list does not already exist,
            it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
            <param name="value">The value to add to the list under the given key.</param>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.Clear">
            <summary>
            Removes all entries in the dictionary.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>true if the dictionary contains the value in any list; otherwise, false.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the given key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains the given key; otherwise, false.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.FindAllValuesByKey(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements from the list which have a key that matches the condition
            defined by the specified predicate.
            </summary>
            <param name="keyFilter">The filter with the condition to use to filter lists by their key.</param>
            <returns>The elements that have a key that matches the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.FindAllValues(System.Predicate{`1})">
            <summary>
            Retrieves all the elements that match the condition defined by the specified predicate.
            </summary>
            <param name="valueFilter">The filter with the condition to use to filter values.</param>
            <returns>The elements that match the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.Remove(`0)">
            <summary>
            Removes a list by key.
            </summary>
            <param name="key">The key of the list to remove.</param>
            <returns><see langword="true" /> if the element was removed.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.RemoveValue(`0,`1)">
            <summary>
            Removes a value from the list with the given key.
            </summary>
            <param name="key">The key of the list where the value exists.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.RemoveValue(`1)">
            <summary>
            Removes a value from all lists where it may be found.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.Values">
            <summary>
            Gets a shallow copy of all values in all lists.
            </summary>
            <value>List of values.</value>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.Keys">
            <summary>
            Gets the list of keys in the dictionary.
            </summary>
            <value>Collection of keys.</value>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.Item(`0)">
            <summary>
            Gets or sets the list associated with the given key. The
            access always succeeds, eventually returning an empty list.
            </summary>
            <param name="key">The key of the list to access.</param>
            <returns>The list associated with the key.</returns>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.Count">
            <summary>
            Gets the number of lists in the dictionary.
            </summary>
            <value>Value indicating the values count.</value>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> for more information.
            </summary>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#Values">
            <summary>
            See <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="T:Prism.Common.ParametersBase">
            <summary>
            This is a generic parameters base class used for Dialog Parameters and Navigation Parameters.
            </summary>
        </member>
        <member name="M:Prism.Common.ParametersBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Prism.Common.ParametersBase.#ctor(System.String)">
            <summary>
            Constructs a list of parameters.
            </summary>
            <param name="query">Query string to be parsed.</param>
        </member>
        <member name="P:Prism.Common.ParametersBase.Item(System.String)">
            <summary>
            Searches Parameter collection and returns value if Collection contains key.
            Otherswise returns null.
            </summary>
            <param name="key">The key for the value to be returned.</param>
            <returns>The value of the parameter referenced by the key; otherwise <c>null</c>.</returns>
        </member>
        <member name="P:Prism.Common.ParametersBase.Count">
            <summary>
            The count, or number, of parameters in collection.
            </summary>
        </member>
        <member name="P:Prism.Common.ParametersBase.Keys">
            <summary>
            Returns an IEnumerable of the Keys in the collection.
            </summary>
        </member>
        <member name="M:Prism.Common.ParametersBase.Add(System.String,System.Object)">
            <summary>
            Adds the key and value to the parameters collection.
            </summary>
            <param name="key">The key to reference this value in the parameters collection.</param>
            <param name="value">The value of the parameter to store.</param>
        </member>
        <member name="M:Prism.Common.ParametersBase.ContainsKey(System.String)">
            <summary>
            Checks collection for presence of key.
            </summary>
            <param name="key">The key to check in the collection.</param>
            <returns><c>true</c> if key exists; else returns <c>false</c>.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.GetEnumerator">
            <summary>
            Gets an enumerator for the KeyValuePairs in parameter collection.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.GetValue``1(System.String)">
            <summary>
            Returns the value of the member referenced by key.
            </summary>
            <typeparam name="T">The type of object to be returned.</typeparam>
            <param name="key">The key for the value to be returned.</param>
            <returns>Returns a matching parameter of <typeparamref name="T"/> if one exists in the Collection.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.GetValues``1(System.String)">
             <summary>
             Returns an IEnumerable of all parameters.
             </summary>
             <typeparam name="T">The type for the values to be returned.</typeparam>
             <param name="key">The key for the values to be returned.</param>
            <returns>Returns a IEnumerable of all the instances of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.TryGetValue``1(System.String,``0@)">
            <summary>
            Checks to see if the parameter collection contains the value.
            </summary>
            <typeparam name="T">The type for the values to be returned.</typeparam>
            <param name="key">The key for the value to be returned.</param>
            <param name="value">Value of the returned parameter if it exists.</param>
        </member>
        <member name="M:Prism.Common.ParametersBase.ToString">
            <summary>
            Converts parameter collection to a parameter string.
            </summary>
            <returns>A string representation of the parameters.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.FromParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds a collection of parameters to the local parameter list.
            </summary>
            <param name="parameters">An IEnumerable of KeyValuePairs to add to the current parameter list.</param>
        </member>
        <member name="T:Prism.Common.ParametersExtensions">
            <summary>
            Extension methods for Navigation or Dialog parameters
            </summary>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.GetValue``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Searches <paramref name="parameters"/> for <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <returns>A matching value of <typeparamref name="T"/> if it exists</returns>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.GetValue(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,System.Type)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <param name="type">The type of the parameter to return</param>
            <returns>A matching value of <paramref name="type"/> if it exists</returns>
            <exception cref="T:System.InvalidCastException">Unable to convert the value of Type</exception>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.TryGetValue``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,``0@)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <param name="value">The value of parameter to return</param>
            <returns>Success if value is found; otherwise returns <c>false</c></returns>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.GetValues``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <returns>An IEnumberable{T} of all the values referenced by key</returns>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.ContainsKey(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Checks to see if key exists in parameter collection
            </summary>
            <param name="parameters">IEnumberable to search</param>
            <param name="key">The key to search the <paramref name="parameters"/> for existence</param>
            <returns><c>true</c> if key exists; <c>false</c> otherwise</returns>
        </member>
        <member name="T:Prism.Events.BackgroundEventSubscription">
            <summary>
            Extends <see cref="T:Prism.Events.EventSubscription"/> to invoke the <see cref="P:Prism.Events.EventSubscription.Action"/> delegate in a background thread.
            </summary>
        </member>
        <member name="M:Prism.Events.BackgroundEventSubscription.#ctor(Prism.Events.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:Prism.Events.BackgroundEventSubscription"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action"/>.</exception>
        </member>
        <member name="M:Prism.Events.BackgroundEventSubscription.InvokeAction(System.Action)">
            <summary>
            Invokes the specified <see cref="T:System.Action"/> in an asynchronous thread by using a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:Prism.Events.BackgroundEventSubscription`1">
            <summary>
            Extends <see cref="T:Prism.Events.EventSubscription`1"/> to invoke the <see cref="P:Prism.Events.EventSubscription`1.Action"/> delegate in a background thread.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Prism.Events.BackgroundEventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:Prism.Events.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Prism.Events.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> in an asynchronous thread by using a <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Prism.Events.DataEventArgs`1">
            <summary>
            Generic arguments class to pass to event handlers that need to receive data.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="M:Prism.Events.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="value">Information related to the event.</param>
        </member>
        <member name="P:Prism.Events.DataEventArgs`1.Value">
            <summary>
            Gets the information related to the event.
            </summary>
            <value>Information related to the event.</value>
        </member>
        <member name="T:Prism.Events.DelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/> that may contain a
            <see cref="T:System.WeakReference"/> to the target. This class is used
            internally by the Prism Library.
            </summary>
        </member>
        <member name="M:Prism.Events.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Events.DelegateReference"/>.
            </summary>
            <param name="delegate">The original <see cref="T:System.Delegate"/> to create a reference for.</param>
            <param name="keepReferenceAlive">If <see langword="false" /> the class will create a weak reference to the delegate, allowing it to be garbage collected. Otherwise it will keep a strong reference to the target.</param>
            <exception cref="T:System.ArgumentNullException">If the passed <paramref name="delegate"/> is not assignable to <see cref="T:System.Delegate"/>.</exception>
        </member>
        <member name="P:Prism.Events.DelegateReference.Target">
            <summary>
            Gets the <see cref="T:System.Delegate" /> (the target) referenced by the current <see cref="T:Prism.Events.DelegateReference"/> object.
            </summary>
            <value><see langword="null"/> if the object referenced by the current <see cref="T:Prism.Events.DelegateReference"/> object has been garbage collected; otherwise, a reference to the <see cref="T:System.Delegate"/> referenced by the current <see cref="T:Prism.Events.DelegateReference"/> object.</value>
        </member>
        <member name="M:Prism.Events.DelegateReference.TargetEquals(System.Delegate)">
            <summary>
            Checks if the <see cref="T:System.Delegate" /> (the target) referenced by the current <see cref="T:Prism.Events.DelegateReference"/> object are equal to another <see cref="T:System.Delegate" />.
            This is equivalent with comparing <see cref="P:Prism.Events.DelegateReference.Target"/> with <paramref name="delegate"/>, only more efficient.
            </summary>
            <param name="delegate">The other delegate to compare with.</param>
            <returns>True if the target referenced by the current object are equal to <paramref name="delegate"/>.</returns>
        </member>
        <member name="T:Prism.Events.DispatcherEventSubscription">
            <summary>
             Extends <see cref="T:Prism.Events.EventSubscription"/> to invoke the <see cref="P:Prism.Events.EventSubscription.Action"/> delegate
             in a specific <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:Prism.Events.DispatcherEventSubscription.#ctor(Prism.Events.IDelegateReference,System.Threading.SynchronizationContext)">
            <summary>
             Creates a new instance of <see cref="T:Prism.Events.BackgroundEventSubscription"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="context">The synchronization context to use for UI thread dispatching.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>.</exception>
        </member>
        <member name="M:Prism.Events.DispatcherEventSubscription.InvokeAction(System.Action)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> asynchronously in the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:Prism.Events.DispatcherEventSubscription`1">
            <summary>
             Extends <see cref="T:Prism.Events.EventSubscription`1"/> to invoke the <see cref="P:Prism.Events.EventSubscription`1.Action"/> delegate
             in a specific <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
             <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Prism.Events.DispatcherEventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference,System.Threading.SynchronizationContext)">
            <summary>
             Creates a new instance of <see cref="T:Prism.Events.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <param name="context">The synchronization context to use for UI thread dispatching.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Prism.Events.DispatcherEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> asynchronously in the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Prism.Events.EventAggregator">
            <summary>
            Implements <see cref="T:Prism.Events.IEventAggregator"/>.
            </summary>
        </member>
        <member name="M:Prism.Events.EventAggregator.GetEvent``1">
            <summary>
            Gets the single instance of the event managed by this EventAggregator. Multiple calls to this method with the same <typeparamref name="TEventType"/> returns the same event instance.
            </summary>
            <typeparam name="TEventType">The type of event to get. This must inherit from <see cref="T:Prism.Events.EventBase"/>.</typeparam>
            <returns>A singleton instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="T:Prism.Events.EventBase">
            <summary>
             Defines a base class to publish and subscribe to events.
            </summary>
        </member>
        <member name="P:Prism.Events.EventBase.SynchronizationContext">
            <summary>
            Allows the SynchronizationContext to be set by the EventAggregator for UI Thread Dispatching
            </summary>
        </member>
        <member name="P:Prism.Events.EventBase.Subscriptions">
            <summary>
            Gets the list of current subscriptions.
            </summary>
            <value>The current subscribers.</value>
        </member>
        <member name="M:Prism.Events.EventBase.InternalSubscribe(Prism.Events.IEventSubscription)">
            <summary>
            Adds the specified <see cref="T:Prism.Events.IEventSubscription"/> to the subscribers' collection.
            </summary>
            <param name="eventSubscription">The subscriber.</param>
            <returns>The <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies every subscriber.</returns>
            <remarks>
            Adds the subscription to the internal list and assigns it a new <see cref="T:Prism.Events.SubscriptionToken"/>.
            </remarks>
        </member>
        <member name="M:Prism.Events.EventBase.InternalPublish(System.Object[])">
            <summary>
            Calls all the execution strategies exposed by the list of <see cref="T:Prism.Events.IEventSubscription"/>.
            </summary>
            <param name="arguments">The arguments that will be passed to the listeners.</param>
            <remarks>Before executing the strategies, this class will prune all the subscribers from the
            list that return a <see langword="null" /> <see cref="T:System.Action`1"/> when calling the
            <see cref="M:Prism.Events.IEventSubscription.GetExecutionStrategy"/> method.</remarks>
        </member>
        <member name="M:Prism.Events.EventBase.Unsubscribe(Prism.Events.SubscriptionToken)">
            <summary>
            Removes the subscriber matching the <see cref="T:Prism.Events.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Prism.Events.SubscriptionToken"/> returned by <see cref="T:Prism.Events.EventBase"/> while subscribing to the event.</param>
        </member>
        <member name="M:Prism.Events.EventBase.Contains(Prism.Events.SubscriptionToken)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:Prism.Events.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Prism.Events.SubscriptionToken"/> returned by <see cref="T:Prism.Events.EventBase"/> while subscribing to the event.</param>
            <returns><see langword="true"/> if there is a <see cref="T:Prism.Events.SubscriptionToken"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Events.EventBase.Prune">
            <summary>
            Forces the PubSubEvent to remove any subscriptions that no longer have an execution strategy.
            </summary>
        </member>
        <member name="T:Prism.Events.EventSubscription">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action depending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
        </member>
        <member name="M:Prism.Events.EventSubscription.#ctor(Prism.Events.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Prism.Events.EventSubscription"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action"/>.</exception>
        </member>
        <member name="P:Prism.Events.EventSubscription.Action">
            <summary>
            Gets the target <see cref="T:System.Action"/> that is referenced by the <see cref="T:Prism.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action"/> or <see langword="null" /> if the referenced target is not alive.</value>
        </member>
        <member name="P:Prism.Events.EventSubscription.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="P:Prism.Events.EventSubscription.SubscriptionToken"/> that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.</value>
        </member>
        <member name="M:Prism.Events.EventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action"/> with the execution strategy, or <see langword="null" /> if the <see cref="T:Prism.Events.IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:Prism.Events.EventSubscription.Action"/>is no longer valid because it was
            garbage collected, this method will return <see langword="null" />.
            Otherwise it will return a delegate that evaluates the <see cref="P:Prism.Events.EventSubscription`1.Filter"/> and if it
            returns <see langword="true" /> will then call <see cref="M:Prism.Events.EventSubscription.InvokeAction(System.Action)"/>. The returned
            delegate holds a hard reference to the <see cref="P:Prism.Events.EventSubscription.Action"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:Prism.Events.EventSubscription.Action"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:Prism.Events.EventSubscription.InvokeAction(System.Action)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overridden.
            </summary>
            <param name="action">The action to execute.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="action"/> is null.</exception>
        </member>
        <member name="T:Prism.Events.EventSubscription`1">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action depending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Prism.Events.EventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Prism.Events.EventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="P:Prism.Events.EventSubscription`1.Action">
            <summary>
            Gets the target <see cref="T:System.Action`1"/> that is referenced by the <see cref="T:Prism.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action`1"/> or <see langword="null" /> if the referenced target is not alive.</value>
        </member>
        <member name="P:Prism.Events.EventSubscription`1.Filter">
            <summary>
            Gets the target <see cref="T:System.Predicate`1"/> that is referenced by the <see cref="T:Prism.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Predicate`1"/> or <see langword="null" /> if the referenced target is not alive.</value>
        </member>
        <member name="P:Prism.Events.EventSubscription`1.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="P:Prism.Events.EventSubscription`1.SubscriptionToken"/> that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.</value>
        </member>
        <member name="M:Prism.Events.EventSubscription`1.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null" /> if the <see cref="T:Prism.Events.IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:Prism.Events.EventSubscription`1.Action"/> or <see cref="P:Prism.Events.EventSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null" />.
            Otherwise it will return a delegate that evaluates the <see cref="P:Prism.Events.EventSubscription`1.Filter"/> and if it
            returns <see langword="true" /> will then call <see cref="M:Prism.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)"/>. The returned
            delegate holds hard references to the <see cref="P:Prism.Events.EventSubscription`1.Action"/> and <see cref="P:Prism.Events.EventSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:Prism.Events.EventSubscription`1.Action"/> and <see cref="P:Prism.Events.EventSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:Prism.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overridden.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="action"/> is null.</exception>
        </member>
        <member name="T:Prism.Events.IDelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="P:Prism.Events.IDelegateReference.Target">
            <summary>
            Gets the referenced <see cref="T:System.Delegate" /> object.
            </summary>
            <value>A <see cref="T:System.Delegate"/> instance if the target is valid; otherwise <see langword="null"/>.</value>
        </member>
        <member name="T:Prism.Events.IEventAggregator">
            <summary>
            Defines an interface to get instances of an event type.
            </summary>
        </member>
        <member name="M:Prism.Events.IEventAggregator.GetEvent``1">
            <summary>
            Gets an instance of an event type.
            </summary>
            <typeparam name="TEventType">The type of event to get.</typeparam>
            <returns>An instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="T:Prism.Events.IEventSubscription">
            <summary>
             Defines a contract for an event subscription to be used by <see cref="T:Prism.Events.EventBase"/>.
            </summary>
        </member>
        <member name="P:Prism.Events.IEventSubscription.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="P:Prism.Events.IEventSubscription.SubscriptionToken"/> that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.</value>
        </member>
        <member name="M:Prism.Events.IEventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null" /> if the <see cref="T:Prism.Events.IEventSubscription"/> is no longer valid.</returns>
        </member>
        <member name="T:Prism.Events.PubSubEvent">
            <summary>
            Defines a class that manages publication and subscription to events.
            </summary>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Subscribe(System.Action)">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>.
            <see cref="T:Prism.Events.PubSubEvent"/> will maintain a <see cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Subscribe(System.Action,Prism.Events.ThreadOption)">
            <summary>
            Subscribes a delegate to an event.
            PubSubEvent will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Subscribe(System.Action,System.Boolean)">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            <para/>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Subscribe(System.Action,Prism.Events.ThreadOption,System.Boolean)">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            <para/>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Publish">
            <summary>
            Publishes the <see cref="T:Prism.Events.PubSubEvent"/>.
            </summary>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Unsubscribe(System.Action)">
            <summary>
            Removes the first subscriber matching <see cref="T:System.Action"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action"/> used when subscribing to the event.</param>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Contains(System.Action)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:System.Action"/>.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action"/> used when subscribing to the event.</param>
            <returns><see langword="true"/> if there is an <see cref="T:System.Action"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Prism.Events.PubSubEvent`1">
            <summary>
            Defines a class that manages publication and subscription to events.
            </summary>
            <typeparam name="TPayload">The type of message that will be passed to the subscribers.</typeparam>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>.
            <see cref="T:Prism.Events.PubSubEvent`1"/> will maintain a <see cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},System.Predicate{`0})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption)">
            <summary>
            Subscribes a delegate to an event.
            PubSubEvent will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},System.Boolean)">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent`1"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            <para/>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption,System.Boolean)">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent`1"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            <para/>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption,System.Boolean,System.Predicate{`0})">
             <summary>
             Subscribes a delegate to an event.
             </summary>
             <param name="action">The delegate that gets executed when the event is published.</param>
             <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
             <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
             <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
             <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
             <remarks>
             If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent`1"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
             If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            
             The PubSubEvent collection is thread-safe.
             </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Publish(`0)">
            <summary>
            Publishes the <see cref="T:Prism.Events.PubSubEvent`1"/>.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Unsubscribe(System.Action{`0})">
            <summary>
            Removes the first subscriber matching <see cref="T:System.Action`1"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Contains(System.Action{`0})">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:System.Action`1"/>.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
            <returns><see langword="true"/> if there is an <see cref="T:System.Action`1"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Prism.Events.SubscriptionToken">
            <summary>
            Subscription token returned from <see cref="T:Prism.Events.EventBase"/> on subscribe.
            </summary>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.#ctor(System.Action{Prism.Events.SubscriptionToken})">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Events.SubscriptionToken"/>.
            </summary>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.Equals(Prism.Events.SubscriptionToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.Dispose">
            <summary>
            Disposes the SubscriptionToken, removing the subscription from the corresponding <see cref="T:Prism.Events.EventBase"/>.
            </summary>
        </member>
        <member name="T:Prism.Events.ThreadOption">
            <summary>
            Specifies on which thread a <see cref="T:Prism.Events.PubSubEvent`1"/> subscriber will be called.
            </summary>
        </member>
        <member name="F:Prism.Events.ThreadOption.PublisherThread">
            <summary>
            The call is done on the same thread on which the <see cref="T:Prism.Events.PubSubEvent`1"/> was published.
            </summary>
        </member>
        <member name="F:Prism.Events.ThreadOption.UIThread">
            <summary>
            The call is done on the UI thread.
            </summary>
        </member>
        <member name="F:Prism.Events.ThreadOption.BackgroundThread">
            <summary>
            The call is done asynchronously on a background thread.
            </summary>
        </member>
        <member name="T:Prism.IActiveAware">
            <summary>
            Interface that defines if the object instance is active
            and notifies when the activity changes.
            </summary>
        </member>
        <member name="P:Prism.IActiveAware.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Prism.IActiveAware.IsActiveChanged">
            <summary>
            Notifies that the value for <see cref="P:Prism.IActiveAware.IsActive"/> property has changed.
            </summary>
        </member>
        <member name="T:Prism.Ioc.ContainerLocator">
            <summary>
            The <see cref="T:Prism.Ioc.ContainerLocator" /> tracks the current instance of the Container used by your Application
            </summary>
        </member>
        <member name="P:Prism.Ioc.ContainerLocator.Current">
            <summary>
            Gets the current <see cref="T:Prism.Ioc.IContainerExtension" />.
            </summary>
        </member>
        <member name="P:Prism.Ioc.ContainerLocator.Container">
            <summary>
            Gets the <see cref="T:Prism.Ioc.IContainerProvider" />
            </summary>
        </member>
        <member name="M:Prism.Ioc.ContainerLocator.SetContainerExtension(System.Func{Prism.Ioc.IContainerExtension})">
            <summary>
            Sets the Container Factory to use if the Current <see cref="T:Prism.Ioc.IContainerProvider" /> is null
            </summary>
            <param name="factory"></param>
            <remarks>
            NOTE: We want to use Lazy Initialization in case the container is first created
            prior to Prism initializing which could be the case with Shiny
            </remarks>
        </member>
        <member name="M:Prism.Ioc.ContainerLocator.ResetContainer">
            <summary>
            Used for Testing to Reset the Current Container
            </summary>
        </member>
        <member name="T:Prism.Ioc.ContainerResolutionErrorCollection">
            <summary>
            A collection of Errors encountered by while attempting to resolve a given type.
            </summary>
        </member>
        <member name="P:Prism.Ioc.ContainerResolutionErrorCollection.Types">
            <summary>
            Provides a list of <see cref="T:System.Type" />'s affected.
            </summary>
            <remarks>
            This could include <see cref="T:System.Object"/> for Registered View's
            </remarks>
        </member>
        <member name="T:Prism.Ioc.ContainerResolutionException">
            <summary>
            Provides a common exception class to be used by <see cref="T:Prism.Ioc.IContainerProvider"/> when encountering a resolution exception
            </summary>
        </member>
        <member name="F:Prism.Ioc.ContainerResolutionException.MissingRegistration">
            <summary>
            The message provided by <see cref="T:Prism.Ioc.ContainerResolutionException"/> when no registration was found with the container
            </summary>
        </member>
        <member name="F:Prism.Ioc.ContainerResolutionException.CannotResolveAbstractType">
            <summary>
            The message provided by <see cref="T:Prism.Ioc.ContainerResolutionException"/> when the implementing type is abstract
            </summary>
        </member>
        <member name="F:Prism.Ioc.ContainerResolutionException.MultipleConstructors">
            <summary>
            The message provided by <see cref="T:Prism.Ioc.ContainerResolutionException"/> when mulptiple constructors were found in the implementing type
            </summary>
        </member>
        <member name="F:Prism.Ioc.ContainerResolutionException.NoPublicConstructors">
            <summary>
            The message provided by <see cref="T:Prism.Ioc.ContainerResolutionException"/> when no public constructors were found in the implementing type
            </summary>
        </member>
        <member name="F:Prism.Ioc.ContainerResolutionException.CyclicalDependency">
            <summary>
            The message provided by <see cref="T:Prism.Ioc.ContainerResolutionException"/> when no public constructors were found in the implementing type
            </summary>
        </member>
        <member name="F:Prism.Ioc.ContainerResolutionException.UnknownError">
            <summary>
            The message provided by <see cref="T:Prism.Ioc.ContainerResolutionException"/> when we have no clue why the container failed.
            </summary>
            <remarks>
            Please file an issue with the Prism team if you encounter a ContainerResolutionException with this message
            </remarks>
        </member>
        <member name="M:Prism.Ioc.ContainerResolutionException.#ctor(System.Type,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Prism.Ioc.ContainerResolutionException"/>
            </summary>
            <param name="serviceType">The failed Service <see cref="T:System.Type"/> that was attempted to be resolved.</param>
            <param name="innerException">The actual <see cref="T:System.Exception"/> thrown by the Container.</param>
        </member>
        <member name="M:Prism.Ioc.ContainerResolutionException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Prism.Ioc.ContainerResolutionException"/>
            </summary>
            <param name="serviceType">The failed Service <see cref="T:System.Type"/> that was attempted to be resolved.</param>
            <param name="serviceName">The Service Name/Key used to resolve the Service Type.</param>
            <param name="innerException">The actual <see cref="T:System.Exception"/> thrown by the Container.</param>
        </member>
        <member name="P:Prism.Ioc.ContainerResolutionException.ServiceType">
            <summary>
            Gets the ServiceType
            </summary>
        </member>
        <member name="P:Prism.Ioc.ContainerResolutionException.ServiceName">
            <summary>
            Gets the Service Key if one was used to resolve the ServiceType
            </summary>
            <remarks>
            This is most commonly the key used to resolve a View for Navigation.
            </remarks>
        </member>
        <member name="M:Prism.Ioc.ContainerResolutionException.GetErrors">
            <summary>
            Gets a Dictionary of errors and their corresponding types to help diagnose possible issues
            that resulted in the ContainerResolutionException.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> mapping types that encountered given exceptions in the resolution process.</returns>
        </member>
        <member name="T:Prism.Ioc.IContainerExtension`1">
            <summary>
            A strongly typed container extension
            </summary>
            <typeparam name="TContainer">The underlying root container</typeparam>
        </member>
        <member name="P:Prism.Ioc.IContainerExtension`1.Instance">
            <summary>
            The instance of the wrapped container
            </summary>
        </member>
        <member name="T:Prism.Ioc.IContainerExtension">
            <summary>
            A generic abstraction for what Prism expects from a container
            </summary>
        </member>
        <member name="M:Prism.Ioc.IContainerExtension.FinalizeExtension">
            <summary>
            Used to perform any final steps for configuring the extension that may be required by the container.
            </summary>
        </member>
        <member name="T:Prism.Ioc.IContainerProvider">
            <summary>
            Resolves Services from the Container
            </summary>
        </member>
        <member name="M:Prism.Ioc.IContainerProvider.Resolve(System.Type)">
            <summary>
            Resolves a given <see cref="T:System.Type"/>
            </summary>
            <param name="type">The service <see cref="T:System.Type"/></param>
            <returns>The resolved Service <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProvider.Resolve(System.Type,System.ValueTuple{System.Type,System.Object}[])">
            <summary>
            Resolves a given <see cref="T:System.Type"/>
            </summary>
            <param name="type">The service <see cref="T:System.Type"/></param>
            <param name="parameters">Typed parameters to use when resolving the Service</param>
            <returns>The resolved Service <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProvider.Resolve(System.Type,System.String)">
            <summary>
            Resolves a given <see cref="T:System.Type"/>
            </summary>
            <param name="type">The service <see cref="T:System.Type"/></param>
            <param name="name">The service name/key used when registering the <see cref="T:System.Type"/></param>
            <returns>The resolved Service <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProvider.Resolve(System.Type,System.String,System.ValueTuple{System.Type,System.Object}[])">
            <summary>
            Resolves a given <see cref="T:System.Type"/>
            </summary>
            <param name="type">The service <see cref="T:System.Type"/></param>
            <param name="name">The service name/key used when registering the <see cref="T:System.Type"/></param>
            <param name="parameters">Typed parameters to use when resolving the Service</param>
            <returns>The resolved Service <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProvider.CreateScope">
            <summary>
            Creates a new scope
            </summary>
        </member>
        <member name="P:Prism.Ioc.IContainerProvider.CurrentScope">
            <summary>
            Gets the Current Scope
            </summary>
        </member>
        <member name="T:Prism.Ioc.IContainerProviderExtensions">
            <summary>
            Provides Generic Type extensions for the <see cref="T:Prism.Ioc.IContainerProvider" />
            </summary>
        </member>
        <member name="M:Prism.Ioc.IContainerProviderExtensions.Resolve``1(Prism.Ioc.IContainerProvider)">
            <summary>
            Resolves a given <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type"/></typeparam>
            <param name="provider">The current <see cref="T:Prism.Ioc.IContainerProvider"/></param>
            <returns>The resolved Service <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProviderExtensions.Resolve``1(Prism.Ioc.IContainerProvider,System.ValueTuple{System.Type,System.Object}[])">
            <summary>
            Resolves a given <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type"/></typeparam>
            <param name="provider">The current <see cref="T:Prism.Ioc.IContainerProvider"/></param>
            <param name="parameters">Typed parameters to use when resolving the Service</param>
            <returns>The resolved Service <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProviderExtensions.Resolve``1(Prism.Ioc.IContainerProvider,System.String,System.ValueTuple{System.Type,System.Object}[])">
            <summary>
            Resolves a given <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type"/></typeparam>
            <param name="provider">The current <see cref="T:Prism.Ioc.IContainerProvider"/></param>
            <param name="name">The service name/key used when registering the <see cref="T:System.Type"/></param>
            <param name="parameters">Typed parameters to use when resolving the Service</param>
            <returns>The resolved Service <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProviderExtensions.Resolve``1(Prism.Ioc.IContainerProvider,System.String)">
            <summary>
            Resolves a given <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type"/></typeparam>
            <param name="provider">The current <see cref="T:Prism.Ioc.IContainerProvider"/></param>
            <param name="name">The service name/key used when registering the <see cref="T:System.Type"/></param>
            <returns>The resolved Service <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProviderExtensions.IsRegistered``1(Prism.Ioc.IContainerProvider)">
            <summary>
            Determines if a given service is registered
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerProvider">The instance of the <see cref="T:Prism.Ioc.IContainerProvider" /></param>
            <returns><c>true</c> if the service is registered.</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerProviderExtensions.IsRegistered``1(Prism.Ioc.IContainerProvider,System.String)">
            <summary>
            Determines if a given service is registered with the specified name
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerProvider">The instance of the <see cref="T:Prism.Ioc.IContainerProvider" /></param>
            <param name="name">The service name or key used</param>
            <returns><c>true</c> if the service is registered.</returns>
        </member>
        <member name="T:Prism.Ioc.IContainerRegistry">
            <summary>
            The registering container
            </summary>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers an instance of a given <see cref="T:System.Type"/>
            </summary>
            <param name="type">The service <see cref="T:System.Type"/> that is being registered</param>
            <param name="instance">The instance of the service or <see cref="T:System.Type" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers an instance of a given <see cref="T:System.Type"/> with the specified name or key
            </summary>
            <param name="type">The service <see cref="T:System.Type"/> that is being registered</param>
            <param name="instance">The instance of the service or <see cref="T:System.Type" /></param>
            <param name="name">The name or key to register the service</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterSingleton(System.Type,System.Type)">
            <summary>
            Registers a Singleton with the given service and mapping to the specified implementation <see cref="T:System.Type" />.
            </summary>
            <param name="from">The service <see cref="T:System.Type" /></param>
            <param name="to">The implementation <see cref="T:System.Type" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterSingleton(System.Type,System.Type,System.String)">
            <summary>
            Registers a Singleton with the given service and mapping to the specified implementation <see cref="T:System.Type" />.
            </summary>
            <param name="from">The service <see cref="T:System.Type" /></param>
            <param name="to">The implementation <see cref="T:System.Type" /></param>
            <param name="name">The name or key to register the service</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterSingleton(System.Type,System.Func{System.Object})">
            <summary>
            Registers a Singleton with the given service <see cref="T:System.Type" /> factory delegate method.
            </summary>
            <param name="type">The service <see cref="T:System.Type" /></param>
            <param name="factoryMethod">The delegate method.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterSingleton(System.Type,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Registers a Singleton with the given service <see cref="T:System.Type" /> factory delegate method.
            </summary>
            <param name="type">The service <see cref="T:System.Type" /></param>
            <param name="factoryMethod">The delegate method using <see cref="T:Prism.Ioc.IContainerProvider"/>.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterManySingleton(System.Type,System.Type[])">
            <summary>
            Registers a Singleton Service which implements service interfaces
            </summary>
            <param name="type">The implementation <see cref="T:System.Type" />.</param>
            <param name="serviceTypes">The service <see cref="T:System.Type"/>'s.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
            <remarks>Registers all interfaces if none are specified.</remarks>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.Register(System.Type,System.Type)">
            <summary>
            Registers a Transient with the given service and mapping to the specified implementation <see cref="T:System.Type" />.
            </summary>
            <param name="from">The service <see cref="T:System.Type" /></param>
            <param name="to">The implementation <see cref="T:System.Type" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers a Transient with the given service and mapping to the specified implementation <see cref="T:System.Type" />.
            </summary>
            <param name="from">The service <see cref="T:System.Type" /></param>
            <param name="to">The implementation <see cref="T:System.Type" /></param>
            <param name="name">The name or key to register the service</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.Register(System.Type,System.Func{System.Object})">
            <summary>
            Registers a Transient Service using a delegate method
            </summary>
            <param name="type">The service <see cref="T:System.Type" /></param>
            <param name="factoryMethod">The delegate method.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.Register(System.Type,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Registers a Transient Service using a delegate method
            </summary>
            <param name="type">The service <see cref="T:System.Type" /></param>
            <param name="factoryMethod">The delegate method using <see cref="T:Prism.Ioc.IContainerProvider"/>.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterMany(System.Type,System.Type[])">
            <summary>
            Registers a Transient Service which implements service interfaces
            </summary>
            <param name="type">The implementing <see cref="T:System.Type" />.</param>
            <param name="serviceTypes">The service <see cref="T:System.Type"/>'s.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
            <remarks>Registers all interfaces if none are specified.</remarks>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterScoped(System.Type,System.Type)">
            <summary>
            Registers a scoped service
            </summary>
            <param name="from">The service <see cref="T:System.Type" /></param>
            <param name="to">The implementation <see cref="T:System.Type" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterScoped(System.Type,System.Func{System.Object})">
            <summary>
            Registers a scoped service using a delegate method.
            </summary>
            <param name="type">The service <see cref="T:System.Type" /></param>
            <param name="factoryMethod">The delegate method.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.RegisterScoped(System.Type,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Registers a scoped service using a delegate method.
            </summary>
            <param name="type">The service <see cref="T:System.Type"/>.</param>
            <param name="factoryMethod">The delegate method.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.IsRegistered(System.Type)">
            <summary>
            Determines if a given service is registered
            </summary>
            <param name="type">The service <see cref="T:System.Type" /></param>
            <returns><c>true</c> if the service is registered.</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistry.IsRegistered(System.Type,System.String)">
            <summary>
            Determines if a given service is registered with the specified name
            </summary>
            <param name="type">The service <see cref="T:System.Type" /></param>
            <param name="name">The service name or key used</param>
            <returns><c>true</c> if the service is registered.</returns>
        </member>
        <member name="T:Prism.Ioc.IContainerRegistryExtensions">
            <summary>
            Provides Generic Type extensions for the <see cref="T:Prism.Ioc.IContainerRegistry" />
            </summary>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterInstance``1(Prism.Ioc.IContainerRegistry,``0)">
            <summary>
            Registers an instance of a given <see cref="T:System.Type"/>
            </summary>
            <typeparam name="TInterface">The service <see cref="T:System.Type"/> that is being registered</typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="instance">The instance of the service or <see cref="T:System.Type" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterInstance``1(Prism.Ioc.IContainerRegistry,``0,System.String)">
            <summary>
            Registers an instance of a given <see cref="T:System.Type"/> with the specified name or key
            </summary>
            <typeparam name="TInterface">The service <see cref="T:System.Type"/> that is being registered</typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="instance">The instance of the service or <see cref="T:System.Type" /></param>
            <param name="name">The name or key to register the service</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterSingleton(Prism.Ioc.IContainerRegistry,System.Type)">
            <summary>
            Registers a Singleton with the given <see cref="T:System.Type" />.
            </summary>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="type">The concrete <see cref="T:System.Type" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterSingleton``2(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers a Singleton with the given service and mapping to the specified implementation <see cref="T:System.Type" />.
            </summary>
            <typeparam name="TFrom">The service <see cref="T:System.Type" /></typeparam>
            <typeparam name="TTo">The implementation <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterSingleton``2(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers a Singleton with the given service and mapping to the specified implementation <see cref="T:System.Type" />.
            </summary>
            <typeparam name="TFrom">The service <see cref="T:System.Type" /></typeparam>
            <typeparam name="TTo">The implementation <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="name">The name or key to register the service</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterSingleton``1(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers a Singleton with the given <see cref="T:System.Type" />.
            </summary>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <typeparam name="T">The concrete <see cref="T:System.Type" /></typeparam>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterSingleton``1(Prism.Ioc.IContainerRegistry,System.Func{System.Object})">
            <summary>
            Registers a Singleton with the given service <see cref="T:System.Type" /> factory delegate method.
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="factoryMethod">The delegate method.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterSingleton``1(Prism.Ioc.IContainerRegistry,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Registers a Singleton with the given service <see cref="T:System.Type" /> factory delegate method.
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="factoryMethod">The delegate method using <see cref="T:Prism.Ioc.IContainerProvider"/>.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterManySingleton``1(Prism.Ioc.IContainerRegistry,System.Type[])">
            <summary>
            Registers a Singleton Service which implements service interfaces
            </summary>
            <typeparam name="T">The implementation <see cref="T:System.Type" />.</typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="serviceTypes">The service <see cref="T:System.Type"/>'s.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
            <remarks>Registers all interfaces if none are specified.</remarks>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.Register(Prism.Ioc.IContainerRegistry,System.Type)">
            <summary>
            Registers a Transient with the given <see cref="T:System.Type" />.
            </summary>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="type">The concrete <see cref="T:System.Type" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.Register``1(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers a Transient with the given <see cref="T:System.Type" />.
            </summary>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <typeparam name="T">The concrete <see cref="T:System.Type" /></typeparam>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.Register(Prism.Ioc.IContainerRegistry,System.Type,System.String)">
            <summary>
            Registers a Transient with the given <see cref="T:System.Type" />.
            </summary>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="type">The concrete <see cref="T:System.Type" /></param>
            <param name="name">The name or key to register the service</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.Register``1(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers a Singleton with the given <see cref="T:System.Type" />.
            </summary>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <typeparam name="T">The concrete <see cref="T:System.Type" /></typeparam>
            <param name="name">The name or key to register the service</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.Register``2(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers a Transient with the given service and mapping to the specified implementation <see cref="T:System.Type" />.
            </summary>
            <typeparam name="TFrom">The service <see cref="T:System.Type" /></typeparam>
            <typeparam name="TTo">The implementation <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.Register``2(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers a Transient with the given service and mapping to the specified implementation <see cref="T:System.Type" />.
            </summary>
            <typeparam name="TFrom">The service <see cref="T:System.Type" /></typeparam>
            <typeparam name="TTo">The implementation <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="name">The name or key to register the service</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.Register``1(Prism.Ioc.IContainerRegistry,System.Func{System.Object})">
            <summary>
            Registers a Transient Service using a delegate method
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="factoryMethod">The delegate method.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.Register``1(Prism.Ioc.IContainerRegistry,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Registers a Transient Service using a delegate method
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="factoryMethod">The delegate method using <see cref="T:Prism.Ioc.IContainerProvider"/>.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterMany``1(Prism.Ioc.IContainerRegistry,System.Type[])">
            <summary>
            Registers a Transient Service which implements service interfaces
            </summary>
            <typeparam name="T">The implementing <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="serviceTypes">The service <see cref="T:System.Type"/>'s.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
            <remarks>Registers all interfaces if none are specified.</remarks>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterScoped(Prism.Ioc.IContainerRegistry,System.Type)">
            <summary>
            Registers a scoped service.
            </summary>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="type">The concrete <see cref="T:System.Type" />.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterScoped``1(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers a scoped service.
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterScoped``2(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers a scoped service
            </summary>
            <typeparam name="TFrom">The service <see cref="T:System.Type" /></typeparam>
            <typeparam name="TTo">The implementation <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterScoped``1(Prism.Ioc.IContainerRegistry,System.Func{System.Object})">
            <summary>
            Registers a scoped service using a delegate method.
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="factoryMethod">The delegate method.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterScoped``1(Prism.Ioc.IContainerRegistry,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Registers a scoped service using a delegate method.
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="factoryMethod">The delegate method.</param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.IsRegistered``1(Prism.Ioc.IContainerRegistry)">
            <summary>
            Determines if a given service is registered
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <returns><c>true</c> if the service is registered.</returns>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.IsRegistered``1(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Determines if a given service is registered with the specified name
            </summary>
            <typeparam name="T">The service <see cref="T:System.Type" /></typeparam>
            <param name="containerRegistry">The instance of the <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <param name="name">The service name or key used</param>
            <returns><c>true</c> if the service is registered.</returns>
        </member>
        <member name="T:Prism.Ioc.Internals.IContainerInfo">
            <summary>
            Used to resolve the registered implementation type for a given key
            </summary>
        </member>
        <member name="M:Prism.Ioc.Internals.IContainerInfo.GetRegistrationType(System.String)">
            <summary>
            Locates the registered implementation <see cref="T:System.Type"/> for a give key
            </summary>
            <param name="key">Registration Key</param>
            <returns>Implementation <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.Internals.IContainerInfo.GetRegistrationType(System.Type)">
            <summary>
            Locates the registered implementation <see cref="T:System.Type"/> for a give key
            </summary>
            <param name="serviceType">Service Type</param>
            <returns>Implementation <see cref="T:System.Type"/></returns>
        </member>
        <member name="T:Prism.Ioc.Internals.IContainerInfoExtensions">
            <summary>
            Internal extensions to get the registered implementation for Regions
            </summary>
        </member>
        <member name="M:Prism.Ioc.Internals.IContainerInfoExtensions.GetRegistrationType(Prism.Ioc.IContainerExtension,System.String)">
            <summary>
            Locates the registered implementation <see cref="T:System.Type"/> for a give key
            </summary>
            <param name="container">The <see cref="T:Prism.Ioc.IContainerExtension"/></param>
            <param name="key">Registration Key</param>
            <returns>Implementation <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Prism.Ioc.Internals.IContainerInfoExtensions.GetRegistrationType(Prism.Ioc.IContainerExtension,System.Type)">
            <summary>
            Locates the registered implementation <see cref="T:System.Type"/> for a give key
            </summary>
            <param name="container">The <see cref="T:Prism.Ioc.IContainerExtension"/></param>
            <param name="type">Service Type</param>
            <returns>Implementation <see cref="T:System.Type"/></returns>
        </member>
        <member name="T:Prism.Ioc.IScopedProvider">
            <summary>
            Defines a Container Scope
            </summary>
        </member>
        <member name="P:Prism.Ioc.IScopedProvider.IsAttached">
            <summary>
            Gets or Sets the IsAttached property.
            </summary>
            <remarks>
            Indicates that Prism is tracking the scope
            </remarks>
        </member>
        <member name="T:Prism.Modularity.CyclicDependencyFoundException">
            <summary>
            Represents the exception that is thrown when there is a circular dependency
            between modules during the module loading process.
            </summary>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.CyclicDependencyFoundException"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.CyclicDependencyFoundException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.CyclicDependencyFoundException"/> class
            with the specified error message and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.CyclicDependencyFoundException"/> class
            with the serialization data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.DuplicateModuleException">
            <summary>
            Exception thrown when a module is declared twice in the same catalog.
            </summary>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException" /> class with a specified error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException"/> class
            with the serialization data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.IModule">
            <summary>
            Defines the contract for the modules deployed in the application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModule.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModule.OnInitialized(Prism.Ioc.IContainerProvider)">
            <summary>
            Notifies the module that it has been initialized.
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalog">
            <summary>
            This is the expected catalog definition for the ModuleManager. 
            The ModuleCatalog holds information about the modules that can be used by the 
            application. Each module is described in a ModuleInfo class, that records the 
            name, type and location of the module. 
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleCatalog.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.GetDependentModules(Prism.Modularity.IModuleInfo)">
            <summary>
            Return the list of <see cref="T:Prism.Modularity.IModuleInfo"/>s that <paramref name="moduleInfo"/> depends on.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> to get the </param>
            <returns>An enumeration of <see cref="T:Prism.Modularity.IModuleInfo"/> that <paramref name="moduleInfo"/> depends on.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Returns the collection of <see cref="T:Prism.Modularity.IModuleInfo"/>s that contain both the <see cref="T:Prism.Modularity.IModuleInfo"/>s in 
            <paramref name="modules"/>, but also all the modules they depend on. 
            </summary>
            <param name="modules">The modules to get the dependencies for.</param>
            <returns>
            A collection of <see cref="T:Prism.Modularity.IModuleInfo"/> that contains both all <see cref="T:Prism.Modularity.IModuleInfo"/>s in <paramref name="modules"/>
            and also all the <see cref="T:Prism.Modularity.IModuleInfo"/> they depend on.
            </returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.Initialize">
            <summary>
            Initializes the catalog, which may load and validate the modules.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.AddModule(Prism.Modularity.IModuleInfo)">
            <summary>
            Adds a <see cref="T:Prism.Modularity.IModuleInfo"/> to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> to add.</param>
            <returns>The <see cref="T:Prism.Modularity.IModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalogCommonExtensions">
            <summary>
            <see cref="T:Prism.Modularity.IModuleCatalog"/>  extensions.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.Exists``1(Prism.Modularity.IModuleCatalog)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> exists in the <see cref="P:Prism.Modularity.IModuleCatalog.Modules"/>  
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check for.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.Exists(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Exists the specified catalog and name.
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.GetModuleState``1(Prism.Modularity.IModuleCatalog)">
            <summary>
            Gets the current <see cref="T:Prism.Modularity.ModuleState"/> of the <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
            <param name="catalog">Catalog.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.GetModuleState(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Gets the current <see cref="T:Prism.Modularity.ModuleState"/> of the <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.IsInitialized``1(Prism.Modularity.IModuleCatalog)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="catalog">Catalog.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.IsInitialized(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalogItem">
            <summary>
            Marker interface that allows both <see cref="T:Prism.Modularity.IModuleInfoGroup"/>s and <see cref="T:Prism.Modularity.IModuleInfo"/>s to be
            added to the <see cref="T:Prism.Modularity.IModuleCatalog"/> from code and XAML. 
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleInfo">
            <summary>
            Set of properties for each Module
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.DependsOn">
            <summary>
            The module names this instance depends on.
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.InitializationMode">
            <summary>
            Gets or Sets the <see cref="P:Prism.Modularity.IModuleInfo.InitializationMode" />
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.ModuleName">
            <summary>
            The name of the module
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.ModuleType">
            <summary>
            The module's type
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.Ref">
            <summary>
            A string ref is a location reference to load the module as it may not be already loaded in the Appdomain in some cases may need to be downloaded.
            </summary>
            <Remarks>
            This is only used for WPF
            </Remarks>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.State">
            <summary>
            Gets or Sets the current <see cref="T:Prism.Modularity.ModuleState" />
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleInfoGroup">
            <summary>
            A collection of <see cref="T:Prism.Modularity.IModuleInfo"/> for the Modules used by the application
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfoGroup.InitializationMode">
            <summary>
            When Prism should Initialize the module
            <see cref="P:Prism.Modularity.IModuleInfoGroup.InitializationMode"/>
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfoGroup.Ref">
            <summary>
            A string ref is a location reference to load the module as it may not be already loaded in the Appdomain in some cases may need to be downloaded.
            </summary>
            <Remarks>
            This is only used for WPF
            </Remarks>
        </member>
        <member name="T:Prism.Modularity.IModuleInitializer">
            <summary>
            Declares a service which initializes the modules into the application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleInitializer.Initialize(Prism.Modularity.IModuleInfo)">
            <summary>
            Initializes the specified module.
            </summary>
            <param name="moduleInfo">The module to initialize</param>
        </member>
        <member name="T:Prism.Modularity.IModuleManager">
            <summary>
            Defines the interface for the service that will retrieve and initialize the application's modules.
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleManager.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleManager.Run">
            <summary>
            Initializes the modules marked as <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/> on the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleManager.LoadModule(System.String)">
            <summary>
            Loads and initializes the module on the <see cref="T:Prism.Modularity.IModuleCatalog"/> with the name <paramref name="moduleName"/>.
            </summary>
            <param name="moduleName">Name of the module requested for initialization.</param>
        </member>
        <member name="E:Prism.Modularity.IModuleManager.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are downloaded.
            </summary>
        </member>
        <member name="E:Prism.Modularity.IModuleManager.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleManagerExtensions">
            <summary>
            Common extensions for the <see cref="T:Prism.Modularity.IModuleManager"/>
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.ModuleExists``1(Prism.Modularity.IModuleManager)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> exists in the <see cref="P:Prism.Modularity.IModuleCatalog.Modules"/>  
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check for.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.ModuleExists(Prism.Modularity.IModuleManager,System.String)">
            <summary>
            Exists the specified catalog and name.
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.GetModuleState``1(Prism.Modularity.IModuleManager)">
            <summary>
            Gets the current <see cref="T:Prism.Modularity.ModuleState"/> of the <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.GetModuleState(Prism.Modularity.IModuleManager,System.String)">
            <summary>
            Gets the current <see cref="T:Prism.Modularity.ModuleState"/> of the <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <param name="name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.IsModuleInitialized``1(Prism.Modularity.IModuleManager)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.IsModuleInitialized(Prism.Modularity.IModuleManager,System.String)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.LoadModule``1(Prism.Modularity.IModuleManager)">
            <summary>
            Loads and initializes the module in the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to load.</typeparam>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
        </member>
        <member name="T:Prism.Modularity.InitializationMode">
            <summary>
            Specifies on which stage the Module group will be initialized.
            </summary>
        </member>
        <member name="F:Prism.Modularity.InitializationMode.WhenAvailable">
            <summary>
            The module will be initialized when it is available on application start-up.
            </summary>
        </member>
        <member name="F:Prism.Modularity.InitializationMode.OnDemand">
            <summary>
            The module will be initialized when requested, and not automatically on application start-up.
            </summary>
        </member>
        <member name="T:Prism.Modularity.LoadModuleCompletedEventArgs">
            <summary>
            Provides completion information after a module is loaded, or fails to load.
            </summary>
        </member>
        <member name="M:Prism.Modularity.LoadModuleCompletedEventArgs.#ctor(Prism.Modularity.IModuleInfo,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.LoadModuleCompletedEventArgs"/> class.
            </summary>
            <param name="moduleInfo">The module info.</param>
            <param name="error">Any error that occurred during the call.</param>
        </member>
        <member name="P:Prism.Modularity.LoadModuleCompletedEventArgs.ModuleInfo">
            <summary>
            Gets the module info.
            </summary>
            <value>The module info.</value>
        </member>
        <member name="P:Prism.Modularity.LoadModuleCompletedEventArgs.Error">
            <summary>
            Gets any error that occurred
            </summary>
            <value>The exception if an error occurred; otherwise null.</value>
        </member>
        <member name="P:Prism.Modularity.LoadModuleCompletedEventArgs.IsErrorHandled">
            <summary>
            Gets or sets a value indicating whether the error has been handled by the event subscriber.
            </summary>
            <value><c>true</c>if the error is handled; otherwise, <c>false</c>.</value>
            <remarks>
            If there is an error on this event and no event subscriber sets this to true, an exception will be thrown by the event publisher.
            </remarks>
        </member>
        <member name="T:Prism.Modularity.ModularityException">
            <summary>
            Base class for exceptions that are thrown because of a problem with modules. 
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModularityException"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModularityException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModularityException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="P:Prism.Modularity.ModularityException.ModuleName">
            <summary>
            Gets or sets the name of the module that this exception refers to.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Prism.Modularity.ModularityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.ModuleCatalogBase">
             <summary>
             The <see cref="T:Prism.Modularity.ModuleCatalogBase"/> holds information about the modules that can be used by the
             application. Each module is described in a <see cref="T:Prism.Modularity.IModuleInfo"/> class, that records the
             name, type and location of the module.
            
             It also verifies that the <see cref="T:Prism.Modularity.ModuleCatalogBase"/> is internally valid. That means that
             it does not have:
             <list>
                 <item>Circular dependencies</item>
                 <item>Missing dependencies</item>
                 <item>
                     Invalid dependencies, such as a Module that's loaded at startup that depends on a module
                     that might need to be retrieved.
                 </item>
             </list>
             The <see cref="T:Prism.Modularity.ModuleCatalogBase"/> also serves as a baseclass for more specialized Catalogs .
             </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.IModuleCatalog"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.#ctor(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.IModuleCatalog"/> class while providing an
            initial list of <see cref="T:Prism.Modularity.IModuleInfo"/>s.
            </summary>
            <param name="modules">The initial list of modules.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.Items">
            <summary>
            Gets the items in the <see cref="T:Prism.Modularity.IModuleCatalog"/>. This property is mainly used to add <see cref="T:Prism.Modularity.IModuleInfoGroup"/>s or
            <see cref="T:Prism.Modularity.IModuleInfo"/>s through XAML.
            </summary>
            <value>The items in the catalog.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.IModuleCatalog"/>, regardless
            if they are within a <see cref="T:Prism.Modularity.IModuleInfoGroup"/> or not.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.Groups">
            <summary>
            Gets the <see cref="T:Prism.Modularity.IModuleInfoGroup"/>s that have been added to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.Validated">
            <summary>
            Gets or sets a value that remembers whether the <see cref="T:Prism.Modularity.ModuleCatalogBase"/> has been validated already.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.GrouplessModules">
            <summary>
            Returns the list of <see cref="T:Prism.Modularity.IModuleInfo"/>s that are not contained within any <see cref="T:Prism.Modularity.IModuleInfoGroup"/>.
            </summary>
            <value>The groupless modules.</value>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.Load">
            <summary>
            Loads the catalog if necessary.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.GetDependentModules(Prism.Modularity.IModuleInfo)">
            <summary>
            Return the list of <see cref="T:Prism.Modularity.IModuleInfo"/>s that <paramref name="moduleInfo"/> depends on.
            </summary>
            <remarks>
            If  the <see cref="T:Prism.Modularity.IModuleCatalog"/> was not yet validated, this method will call <see cref="M:Prism.Modularity.ModuleCatalogBase.Validate"/>.
            </remarks>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> to get the </param>
            <returns>An enumeration of <see cref="T:Prism.Modularity.IModuleInfo"/> that <paramref name="moduleInfo"/> depends on.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Returns a list of <see cref="T:Prism.Modularity.IModuleInfo"/>s that contain both the <see cref="T:Prism.Modularity.IModuleInfo"/>s in
            <paramref name="modules"/>, but also all the modules they depend on.
            </summary>
            <param name="modules">The modules to get the dependencies for.</param>
            <returns>
            A list of <see cref="T:Prism.Modularity.IModuleInfo"/> that contains both all <see cref="T:Prism.Modularity.IModuleInfo"/>s in <paramref name="modules"/>
            but also all the <see cref="T:Prism.Modularity.IModuleInfo"/> they depend on.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.Validate">
            <summary>
            Validates the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <exception cref="T:Prism.Modularity.ModularityException">When validation of the <see cref="T:Prism.Modularity.IModuleCatalog"/> fails.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.AddModule(Prism.Modularity.IModuleInfo)">
            <summary>
            Adds a <see cref="T:Prism.Modularity.IModuleInfo"/> to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> to add.</param>
            <returns>The <see cref="T:Prism.Modularity.IModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.Initialize">
            <summary>
            Initializes the catalog, which may load and validate the modules.
            </summary>
            <exception cref="T:Prism.Modularity.ModularityException">When validation of the <see cref="T:Prism.Modularity.ModuleCatalogBase"/> fails, because this method calls <see cref="M:Prism.Modularity.ModuleCatalogBase.Validate"/>.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.SolveDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Checks for cyclic dependencies, by calling the dependencysolver.
            </summary>
            <param name="modules">the.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Ensures that all the dependencies within <paramref name="modules"/> refer to <see cref="T:Prism.Modularity.IModuleInfo"/>s
            within that list.
            </summary>
            <param name="modules">The modules to validate modules for.</param>
            <exception cref="T:Prism.Modularity.ModularityException">
            Throws if a <see cref="T:Prism.Modularity.IModuleInfo"/> in <paramref name="modules"/> depends on a module that's
            not in <paramref name="modules"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="modules"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.InnerLoad">
            <summary>
            Does the actual work of loading the catalog.  The base implementation does nothing.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.Sort(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Sorts a list of <see cref="T:Prism.Modularity.IModuleInfo"/>s. This method is called by <see cref="M:Prism.Modularity.ModuleCatalogBase.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})"/>
            to return a sorted list.
            </summary>
            <param name="modules">The <see cref="T:Prism.Modularity.IModuleInfo"/>s to sort.</param>
            <returns>Sorted list of <see cref="T:Prism.Modularity.IModuleInfo"/>s</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateUniqueModules">
            <summary>
            Makes sure all modules have an Unique name.
            </summary>
            <exception cref="T:Prism.Modularity.DuplicateModuleException">
            Thrown if the names of one or more modules are not unique.
            </exception>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateDependencyGraph">
            <summary>
            Ensures that there are no cyclic dependencies.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateCrossGroupDependencies">
            <summary>
            Ensures that there are no dependencies between modules on different groups.
            </summary>
            <remarks>
            A groupless module can only depend on other groupless modules.
            A module within a group can depend on other modules within the same group and/or on groupless modules.
            </remarks>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateDependenciesInitializationMode">
            <summary>
            Ensures that there are no modules marked to be loaded <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/>
            depending on modules loaded <see cref="F:Prism.Modularity.InitializationMode.OnDemand"/>
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.GetDependentModulesInner(Prism.Modularity.IModuleInfo)">
            <summary>
            Returns the <see cref="T:Prism.Modularity.IModuleInfo"/> on which the received module dependens on.
            </summary>
            <param name="moduleInfo">Module whose dependant modules are requested.</param>
            <returns>Collection of <see cref="T:Prism.Modularity.IModuleInfo"/> dependants of <paramref name="moduleInfo"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.EnsureCatalogValidated">
            <summary>
            Ensures that the catalog is validated.
            </summary>
        </member>
        <member name="T:Prism.Modularity.ModuleDependencyAttribute">
            <summary>
            Specifies that the current module has a dependency on another module. This attribute should be used on classes that implement <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleDependencyAttribute"/>.
            </summary>
            <param name="moduleName">The name of the module that this module is dependant upon.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleDependencyAttribute.ModuleName">
            <summary>
            Gets the name of the module that this module is dependant upon.
            </summary>
            <value>The name of the module that this module is dependant upon.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleDependencySolver">
            <summary>
            Used by <see cref="T:Prism.Modularity.IModuleInitializer"/> to get the load sequence
            for the modules to load according to their dependencies.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencySolver.AddModule(System.String)">
            <summary>
            Adds a module to the solver.
            </summary>
            <param name="name">The name that uniquely identifies the module.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencySolver.AddDependency(System.String,System.String)">
            <summary>
            Adds a module dependency between the modules specified by dependingModule and
            dependentModule.
            </summary>
            <param name="dependingModule">The name of the module with the dependency.</param>
            <param name="dependentModule">The name of the module dependingModule
            depends on.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencySolver.Solve">
            <summary>
            Calculates an ordered vector according to the defined dependencies.
            Non-dependant modules appears at the beginning of the resulting array.
            </summary>
            <returns>The resulting ordered list of modules.</returns>
            <exception cref="T:Prism.Modularity.CyclicDependencyFoundException">This exception is thrown
            when a cycle is found in the defined depedency graph.</exception>
        </member>
        <member name="P:Prism.Modularity.ModuleDependencySolver.ModuleCount">
            <summary>
            Gets the number of modules added to the solver.
            </summary>
            <value>The number of modules.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleDownloadProgressChangedEventArgs">
            <summary>
            Provides progress information as a module downloads.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDownloadProgressChangedEventArgs.#ctor(Prism.Modularity.IModuleInfo,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleDownloadProgressChangedEventArgs"/> class.
            </summary>
            <param name="moduleInfo">The module info.</param>
            <param name="bytesReceived">The bytes received.</param>
            <param name="totalBytesToReceive">The total bytes to receive.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleDownloadProgressChangedEventArgs.ModuleInfo">
            <summary>
            Getsthe module info.
            </summary>
            <value>The module info.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleDownloadProgressChangedEventArgs.BytesReceived">
            <summary>
            Gets the bytes received.
            </summary>
            <value>The bytes received.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleDownloadProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Gets the total bytes to receive.
            </summary>
            <value>The total bytes to receive.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleInitializeException">
            <summary>
            Exception thrown by <see cref="T:Prism.Modularity.IModuleInitializer"/> implementations whenever 
            a module fails to load.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleInitializeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleInitializeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception 
            that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.ModuleNotFoundException">
            <summary>
            Exception thrown when a requested <see cref="F:Prism.Modularity.InitializationMode.OnDemand"/> <see cref="T:Prism.Modularity.IModule"/> was not found.
            </summary>
            <summary>
            Exception thrown when a requested <see cref="T:Prism.Modularity.IModuleInfo"/> is not found.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException"/> class
            with the serialization data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.ModuleState">
            <summary>
            Defines the states a <see cref="T:Prism.Modularity.IModuleInfo"/> can be in, with regards to the module loading and initialization process. 
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.NotStarted">
            <summary>
            Initial state for <see cref="T:Prism.Modularity.IModuleInfo"/>s. The <see cref="T:Prism.Modularity.IModuleInfo"/> is defined, 
            but it has not been loaded, retrieved or initialized yet.
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.LoadingTypes">
            <summary>
            The assembly that contains the type of the module is currently being loaded.
            </summary>
            <remarks>
            Used in Wpf to load a module dynamically
            </remarks>
        </member>
        <member name="F:Prism.Modularity.ModuleState.ReadyForInitialization">
            <summary>
            The assembly that holds the Module is present. This means the type of the <see cref="T:Prism.Modularity.IModule"/> can be instantiated and initialized. 
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.Initializing">
            <summary>
            The module is currently Initializing, by the <see cref="T:Prism.Modularity.IModuleInitializer"/>
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.Initialized">
            <summary>
            The module is initialized and ready to be used. 
            </summary>
        </member>
        <member name="T:Prism.Modularity.ModuleTypeLoadingException">
            <summary>
            Exception thrown by <see cref="T:Prism.Modularity.IModuleManager"/> implementations whenever 
            a module fails to retrieve.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Mvvm.BindableBase">
            <summary>
            Implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> to simplify models.
            </summary>
        </member>
        <member name="E:Prism.Mvvm.BindableBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.BindableBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Prism.Mvvm.BindableBase.SetProperty``1(``0@,``0,System.Action,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <param name="onChanged">Action that is called after the property value has been changed.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Prism.Mvvm.BindableBase.RaisePropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="M:Prism.Mvvm.BindableBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="args">The PropertyChangedEventArgs</param>
        </member>
        <member name="T:Prism.Mvvm.ErrorsContainer`1">
            <summary>
            Manages validation errors for an object, notifying when the error state changes.
            </summary>
            <typeparam name="T">The type of the error object.</typeparam>
        </member>
        <member name="F:Prism.Mvvm.ErrorsContainer`1.raiseErrorsChanged">
            <summary>
            Delegate to be called when raiseErrorsChanged is invoked.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ErrorsContainer`1.validationResults">
            <summary>
            A map from property name to a <see cref="T:System.Collections.Generic.List`1"/> of the errors and sources.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.#ctor(System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Mvvm.ErrorsContainer`1"/> class.
            </summary>
            <param name="raiseErrorsChanged">The action that is invoked when errors are added for an object.</param>
        </member>
        <member name="P:Prism.Mvvm.ErrorsContainer`1.HasErrors">
            <summary>
            Gets a value indicating whether the object has validation errors. 
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.GetErrors">
            <summary>
            Returns all the errors in the container.
            </summary>
            <returns>The dictionary of errors per property.</returns>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The validation errors of type <typeparamref name="T"/> for the property.</returns>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.ClearErrors">
            <summary>
            Clears all errors.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.ClearErrors``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Clears the errors for the property indicated by the property expression.
            </summary>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression indicating a property.</param>
            <example>
            container.ClearErrors(()=>SomeProperty);
            </example>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.ClearErrors(System.String)">
            <summary>
            Clears the errors for a property.
            </summary>
            <param name="propertyName">The name of the property for which to clear errors.</param>
            <example>
            container.ClearErrors("SomeProperty");
            </example>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.SetErrors``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the validation errors for the specified property.
            </summary>
            <typeparam name="TProperty">The property type for which to set errors.</typeparam>
            <param name="propertyExpression">The <see cref="T:System.Linq.Expressions.Expression"/> indicating the property.</param>
            <param name="propertyErrors">The list of errors to set for the property.</param>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.SetErrors(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the validation errors for the specified property.
            </summary>
            <remarks>
            If a change is detected then the errors changed event is raised.
            </remarks>
            <param name="propertyName">The name of the property.</param>
            <param name="newValidationResults">The new validation errors.</param>
        </member>
        <member name="T:Prism.Mvvm.PropertySupport">
            <summary>
             Provides support for extracting property information based on a property expression.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Extracts the property name from a property expression.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression (e.g. p => p.PropertyName)</param>
            <returns>The name of the property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="propertyExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the expression is:<br/>
                Not a <see cref="T:System.Linq.Expressions.MemberExpression"/><br/>
                The <see cref="T:System.Linq.Expressions.MemberExpression"/> does not represent a property.<br/>
                Or, the property is static.
            </exception>
        </member>
        <member name="M:Prism.Mvvm.PropertySupport.ExtractPropertyNameFromLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Extracts the property name from a LambdaExpression.
            </summary>
            <param name="expression">The LambdaExpression</param>
            <returns>The name of the property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="expression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the expression is:<br/>
                The <see cref="T:System.Linq.Expressions.MemberExpression"/> does not represent a property.<br/>
                Or, the property is static.
            </exception>
        </member>
        <member name="T:Prism.Mvvm.ViewModelLocationProvider">
            <summary>
            The ViewModelLocationProvider class locates the view model for the view that has the AutoWireViewModelChanged attached property set to true.
            The view model will be located and injected into the view's DataContext. To locate the view model, two strategies are used: First the ViewModelLocationProvider
            will look to see if there is a view model factory registered for that view, if not it will try to infer the view model using a convention based approach.
            This class also provides methods for registering the view model factories,
            and also to override the default view model factory and the default view type to view model type resolver.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._factories">
            <summary>
            A dictionary that contains all the registered factories for the views.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._typeFactories">
            <summary>
            A dictionary that contains all the registered ViewModel types for the views.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._defaultViewModelFactory">
            <summary>
            The default view model factory which provides the ViewModel type as a parameter.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._defaultViewModelFactoryWithViewParameter">
            <summary>
            ViewModelfactory that provides the View instance and ViewModel type as parameters.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._defaultViewTypeToViewModelTypeResolver">
            <summary>
            Default view type to view model type resolver, assumes the view model is in same assembly as the view type, but in the "ViewModels" namespace.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.SetDefaultViewModelFactory(System.Func{System.Type,System.Object})">
            <summary>
            Sets the default view model factory.
            </summary>
            <param name="viewModelFactory">The view model factory which provides the ViewModel type as a parameter.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.SetDefaultViewModelFactory(System.Func{System.Object,System.Type,System.Object})">
            <summary>
            Sets the default view model factory.
            </summary>
            <param name="viewModelFactory">The view model factory that provides the View instance and ViewModel type as parameters.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver(System.Func{System.Type,System.Type})">
            <summary>
            Sets the default view type to view model type resolver.
            </summary>
            <param name="viewTypeToViewModelTypeResolver">The view type to view model type resolver.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.AutoWireViewModelChanged(System.Object,System.Action{System.Object,System.Object})">
            <summary>
            Automatically looks up the viewmodel that corresponds to the current view, using two strategies:
            It first looks to see if there is a mapping registered for that view, if not it will fallback to the convention based approach.
            </summary>
            <param name="view">The dependency object, typically a view.</param>
            <param name="setDataContextCallback">The call back to use to create the binding between the View and ViewModel</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.GetViewModelForView(System.Object)">
            <summary>
            Gets the view model for the specified view.
            </summary>
            <param name="view">The view that the view model wants.</param>
            <returns>The ViewModel that corresponds to the view passed as a parameter.</returns>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.GetViewModelTypeForView(System.Type)">
            <summary>
            Gets the ViewModel type for the specified view.
            </summary>
            <param name="view">The View that the ViewModel wants.</param>
            <returns>The ViewModel type that corresponds to the View.</returns>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Register``1(System.Func{System.Object})">
            <summary>
            Registers the ViewModel factory for the specified view type.
            </summary>
            <typeparam name="T">The View</typeparam>
            <param name="factory">The ViewModel factory.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Register(System.String,System.Func{System.Object})">
            <summary>
            Registers the ViewModel factory for the specified view type name.
            </summary>
            <param name="viewTypeName">The name of the view type.</param>
            <param name="factory">The ViewModel factory.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Register``2">
            <summary>
            Registers a ViewModel type for the specified view type.
            </summary>
            <typeparam name="T">The View</typeparam>
            <typeparam name="VM">The ViewModel</typeparam>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Register(System.String,System.Type)">
            <summary>
            Registers a ViewModel type for the specified view.
            </summary>
            <param name="viewTypeName">The View type name</param>
            <param name="viewModelType">The ViewModel type</param>
        </member>
        <member name="T:Prism.Navigation.IDestructible">
            <summary>
            Interface for objects that require cleanup of resources prior to Disposal
            </summary>
        </member>
        <member name="M:Prism.Navigation.IDestructible.Destroy">
            <summary>
            This method allows cleanup of any resources used by your View/ViewModel 
            </summary>
        </member>
        <member name="T:Prism.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CannotRegisterCompositeCommandInItself">
            <summary>
              Looks up a localized string similar to Cannot register a CompositeCommand in itself..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CannotRegisterSameCommandTwice">
            <summary>
              Looks up a localized string similar to Cannot register the same command twice in the same CompositeCommand..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CyclicDependencyFound">
            <summary>
              Looks up a localized string similar to At least one cyclic dependency has been found in the module catalog. Cycles in the module dependencies must be avoided..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DefaultDebugLoggerPattern">
            <summary>
              Looks up a localized string similar to {1}: {2}. Priority: {3}. Timestamp:{0:u}..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DelegateCommandDelegatesCannotBeNull">
            <summary>
              Looks up a localized string similar to Neither the executeMethod nor the canExecuteMethod delegates can be null..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DelegateCommandInvalidGenericPayloadType">
            <summary>
              Looks up a localized string similar to T for DelegateCommand&lt;T&gt; is not an object nor Nullable..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DependencyForUnknownModule">
            <summary>
              Looks up a localized string similar to Cannot add dependency for unknown module {0}.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DependencyOnMissingModule">
            <summary>
              Looks up a localized string similar to A module declared a dependency on another module which is not declared to be loaded. Missing module(s): {0}.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DuplicatedModule">
            <summary>
              Looks up a localized string similar to A duplicated module with name {0} has been found by the loader..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.EventAggregatorNotConstructedOnUIThread">
            <summary>
              Looks up a localized string similar to To use the UIThread option for subscribing, the EventAggregator must be constructed on the UI thread..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.FailedToLoadModule">
            <summary>
              Looks up a localized string similar to An exception occurred while initializing module &apos;{0}&apos;. 
               - The exception message was: {2}
               - The Assembly that the module was trying to be loaded from was:{1}
               Check the InnerException property of the exception for more information. If the exception occurred while creating an object in a DI container, you can exception.GetRootException() to help locate the root cause of the problem..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.FailedToLoadModuleNoAssemblyInfo">
            <summary>
              Looks up a localized string similar to An exception occurred while initializing module &apos;{0}&apos;. 
               - The exception message was: {1}
               Check the InnerException property of the exception for more information. If the exception occurred 
               while creating an object in a DI container, you can exception.GetRootException() to help locate the 
               root cause of the problem..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.FailedToRetrieveModule">
             <summary>
               Looks up a localized string similar to Failed to load type for module {0}. 
            Error was: {1}..
             </summary>
        </member>
        <member name="P:Prism.Properties.Resources.InvalidDelegateRerefenceTypeException">
            <summary>
              Looks up a localized string similar to Invalid Delegate Reference Type Exception.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.InvalidPropertyNameException">
            <summary>
              Looks up a localized string similar to The entity does not contain a property with that name.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ModuleDependenciesNotMetInGroup">
            <summary>
              Looks up a localized string similar to Module {0} depends on other modules that don&apos;t belong to the same group..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_ExpressionNotProperty_Exception">
            <summary>
              Looks up a localized string similar to The member access expression does not access a property..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_NotMemberAccessExpression_Exception">
            <summary>
              Looks up a localized string similar to The expression is not a member access expression..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_StaticExpression_Exception">
            <summary>
              Looks up a localized string similar to The referenced property is a static property..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.StartupModuleDependsOnAnOnDemandModule">
            <summary>
              Looks up a localized string similar to Module {0} is marked for automatic initialization when the application starts, but it depends on modules that are marked as OnDemand initialization. To fix this error, mark the dependency modules for InitializationMode=WhenAvailable, or remove this validation by extending the ModuleCatalog class..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be null or empty..
            </summary>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Class that provides extension methods for the Exception class. These extension methods provide
            a mechanism for developers to get more easily to the root cause of an exception, especially in combination with 
            DI-containers such as Unity. 
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.RegisterFrameworkExceptionType(System.Type)">
            <summary>
            Register the type of an Exception that is thrown by the framework. The <see cref="M:System.ExceptionExtensions.GetRootException(System.Exception)"/> method uses
            this list of Exception types to find out if something has gone wrong.  
            </summary>
            <param name="frameworkExceptionType">The type of exception to register.</param>
        </member>
        <member name="M:System.ExceptionExtensions.IsFrameworkExceptionRegistered(System.Type)">
            <summary>
            Determines whether the exception type is already registered using the <see cref="M:System.ExceptionExtensions.RegisterFrameworkExceptionType(System.Type)"/> 
            method
            </summary>
            <param name="frameworkExceptionType">The type of framework exception to find.</param>
            <returns>
            	<c>true</c> if the exception type is already registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ExceptionExtensions.GetRootException(System.Exception)">
            <summary>
            Looks at all the inner exceptions of the <paramref name="exception"/> parameter to find the 
            most likely root cause of the exception. This works by skipping all registered exception types.
            </summary>
            <remarks>
            This method is not 100% accurate and should only be used to point a developer into the most likely direction.
            It should not be used to replace the Inner Exception stack of an exception, because this might hide required exception
            information. 
            </remarks>
            <param name="exception">The exception that will provide the list of inner exeptions to examine.</param>
            <returns>
            The exception that most likely caused the exception to occur. If it can't find the root exception, it will return the 
            <paramref name="exception"/> value itself.
            </returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtensions">
            <summary>
            Extension methods for the Task object.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="configureAwait">Configures an awaiter used to await this task</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception},System.Boolean)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
            <param name="configureAwait">Configures an awaiter used to await this task</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtensionsT">
            <summary>
            Extension methods for the Task object.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Boolean)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="configureAwait">Configures an awaiter used to await this task</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Action{System.Exception})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception},System.Boolean)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
            <param name="configureAwait">Configures an awaiter used to await this task</param>
        </member>
    </members>
</doc>
